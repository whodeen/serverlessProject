org: oleksandrfedoniuk
app: myserverlessproject
service: myserverlessproject

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: shelf-test
  state: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    signupTableName: ${self:custom.signupTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
        - sns:SetSMSAttributes
        - sns:Publish
      Resource: "*"
  apiGateway:
      apiKeys:
        - free:
            - myFreeKey
        - paid:
            - myPaidKey
      usagePlan:
        - free:
            quota:
              limit: 5000
              period: MONTH
            throttle:
              burstLimit: 200
              rateLimit: 100
        - paid:
            quota:
              limit: 50000
              period: MONTH
            throttle:
              burstLimit: 2000
              rateLimit: 1000

plugins:
  - serverless-s3-sync
  # - serverless-step-functions

package:
  artifact: artifact.zip

custom:
  tableName: player-points
  signupTableName: signup-table-name
  bucketName: myserverlessprojectuploadbucket-theretry
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

# stepFunctions:
#   validate: true
#   stateMachines:
#     somethingToFix:
#       name: somethingToFix
#       events:
#         - http:
#             path: signup-with-reminders
#             method: POST
#             cors: true
#       definition: ${file(./stepFunction.yml)}
        

functions:
  getUser:
    handler: lambda/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
  getPlayerScore:
    handler: lambda/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-players-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambda/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-players-score/{ID}
          method: POST
          cors: true
          private: true
  updatePlayerScore:
    handler: lambda/endpoints/updatePlayerScore.handler
    events:
      - http:
          path: update-players-score/{ID}
          method: POST
          cors: true
  getGameScores:
    handler: lambda/endpoints/getGameScores.handler
    events:
      - http:
          path: get-game-score/{game}
          method: GET
          cors: true
  createFile:
    handler: lambda/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambda/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  sendEmail:
    handler: lambda/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email/
          method: POST
          cors: true
  sendSMS:
    handler: lambda/endpoints/sendSMS.handler
    events:
      - http:
          path: send-sms/
          method: POST
          cors: true
  # addSignUp:
  #   handler: lambda/stepLambda/addSignUp.handler
  # getSignUp:
  #   handler: lambda/stepLambda/getSignUp.handler
  # sendReminderEmail:
  #   handler: lambda/stepLambda/sendReminderEmail.handler

  sendReminder:
    handler: lambda/scheduledTasks/reminderEmail.handler
    events:
      - schedule: cron(25 19 ? * 5 *)
      # min hours dayofthemonth dayoftheweek yearoffire 
  sendMorningNews:
    handler: lambda/scheduledTasks/morningNews.handler
    events:
      - schedule: cron(10 20 ? * * *)
      
resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
            Projection:
                ProjectionType: ALL

    MyEmailSignupTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.signupTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
